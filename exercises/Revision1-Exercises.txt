#!/usr/bin/env python
# coding: utf-8

# # Fixation exercises

# Below you will find some exercises to consolidate the concepts learned in the course so far. The exercises are divided into practical, real-life examples:
#
# - Shopping list
# - Sales forecast
# - Sales report
# - Customer segmentation
# - Text parser
#
# For each subject, you will find at least one exercise.
# In cases where there is more than one exercise for the same subject, you will be invited 
# to solve the same problem in different ways. This is on purpose,
# because the objective is for you to practice what you have learned and, at the same time,
# learn new ways to solve the same problem. For example,
# using different data structures, or different ways of iterating over a
# data structure, or even using functions.
#
# Try to solve the exercises by yourself. If you have difficulties, consult the course material and, if you still cannot resolve it, consult the solution.

# ## Shopping list

# ### First version of the shopping list

# Write a program that allows a user to create a shopping list.
# User must be able to add items, remove items and view the list.
#
# Structure your program as follows:
#
# 1. Create an empty list to store the shopping list items.
# 2. Create an infinite loop that prints a menu of options to the user and allows them to choose an option.
# 3. Inside the loop, use an if statement to perform the appropriate task as per the user's choice.
# 4. If the user chooses to add an item, ask them to enter the name of the item and add it to the list.
# 5. If the user chooses to remove an item, ask them to enter the name of the item and remove it from the list.
# 6. If the user chooses to view the list, show each list item on its own line.
# 7. If the user chooses to exit, terminate the loop using break.


# ### Second version of the shopping list

# Change the shopping list program to use a dictionary instead of a list.
# The program should have the same functionalities, but now it should be possible
# to add more than one unit of an item to the shopping list. That is, the dictionary
# should store the item name and the quantity desired by the user. For example,
# if the user types "banana" and "2", the dictionary should store "banana" as the key
# and 2 as the value. The dictionary structure would be like this: `{"banana": 2}`.
#
# The program should allow the user to add, remove and view the shopping dictionary.
#
# Additionally, the program should show an error message if the user tries to
# use an invalid menu option. For example, if the user types 5, the program
# should show the message "Invalid option. Please choose a valid option." and
# show the menu again. Also, the program should be case insensitive, meaning
# "Apple" and "apple" should be considered the same item.
#
# Example output:
#
# ```
# 1 Add item
# 2 Remove item
# 3 View list
# 4 Exit
# Choose an option: 1
# Type an item: banana
# Type the quantity: 2
#
# 1 Add item
# 2 Remove item
# 3 View list
# 4 Exit
# Choose an option: 1
# Type an item: apple
# Type the quantity: 3
#
# 1 Add item
# 2 Remove item
# 3 View list
# 4 Exit
# Choose an option: 3
# {'banana': 2, 'apple': 3}
#
# 1 Add item
# 2 Remove item
# 3 View list
# 4 Exit
# Choose an option: 2
# Type an item: banana
# Type the quantity: 1
#
# 1 Add item
# 2 Remove item
# 3 View list
# 4 Exit
# Choose an option: 3
# {'banana': 1, 'apple': 3}
#
# 1 Add item
# 2 Remove item
# 3 View list
# 4 Exit
# Choose an option: 4
# ```

# In[ ]:

# solution



# ### Third version of the shopping list

# Keep the shopping list program with a dictionary,
# but now use functions to organize the code.
# Create functions for each menu option:
# `add_item`, `remove_item`, and `view_list`.
# Also, create a function to show the menu. The program should continue
# to work the same way, but now the code should be organized in functions.
#

# In[ ]:

# solution


# ## Sales forecast

# ### First version of the sales forecast

# Write a program that forecasts total sales for each product in a company.
# The user should enter the product name, current month's sales, and growth rate,
# and the program should calculate the forecasted sales for the next month.
#
# Structure your program as follows:
#
# 1. Create an empty dictionary to store sales forecasts.
# 2. Create an infinite loop that prompts the user for the product name, current month's sales, and growth rate.
# 3. Inside the loop, use an if statement to check if the user typed 'exit'.
# 4. If the user types 'exit', terminate the loop using break.
# 5. If the user types anything else, use the inputs to calculate the forecasted sales and add them to the dictionary.
# 6. After the loop ends, use a for loop to iterate over the dictionary and show the sales forecasts for each product.
#
# Example output:
#
# ```
# Type the product name (or 'exit' to exit): iphone
# Type the current month's sales: 10000
# Type the growth rate (%): 10
# Type the product name (or 'exit' to exit): iphone case
# Type the current month's sales: 200
# Type the growth rate (%): 20
# Type the product name (or 'exit' to exit): exit
# iphone: Next month's sales forecast = R$ 11000.00
# iphone case: Next month's sales forecast = R$ 240.00
# ```

# In[ ]:

# solution


# ### Second version of the sales forecast

# Keep the same functionality of the previous program, but now validate user input.
# If the user types an invalid value for sales or growth rate, show the message
# "Invalid input. Please enter a number for sales and growth rate." and prompt
# the user to enter the values again. This validation should be done using try/except.

# In[ ]:

# solution



# ## Sales report

# ### First version of the sales report

# Write a program that calculates the total and average sales for each salesperson in a company.
# The user should enter the salesperson's name and sales, and the program should keep track of
# the total and average sales for each salesperson.
#
# Structure your program as follows:
#
# 1. Create an empty dictionary to store sales data.
# 2. Create an infinite loop that prompts the user for the salesperson's name and sales.
# 3. Inside the loop, use an if statement to check if the user typed 'exit'.
# 4. If the user types 'exit', terminate the loop using break.
# 5. If the user types anything else, use the inputs to calculate the total and average sales for the salesperson and add them to the dictionary.
# 6. After the loop ends, use a for loop to iterate over the dictionary and show the total and average sales for each salesperson.
#
# Example output:
#     
# ```
# Type the salesperson's name (or 'exit' to exit): John
# Type the sales: 100
# Type the salesperson's name (or 'exit' to exit): Mary
# Type the sales: 200
# Type the salesperson's name (or 'exit' to exit): John
# Type the sales: 300
# Type the salesperson's name (or 'exit' to exit): exit
# John: Total sales = R$ 400.0, Average sales = R$ 200.0
# Mary: Total sales = R$ 200.0, Average sales = R$ 200.0
# ```
#
# Tip: use the sum() method to calculate the total sales and the len() method to calculate the number of sales.

# In[ ]:

# solution


# ### Second Version of the Sales Report

# Maintain the same functionality of the previous program, but now validate the user input.
# If the user enters an invalid value for sales, show the message
# "Invalid input. Please enter a number for sales." and ask the user to enter
# the value again. Such validation must be done using try/except.
# 
# Additionally, instead of storing each sale in a list for each salesperson, store
# the total sales and the number of sales in a dictionary. For example, if the user
# enters "João" and "1000" for sales, the dictionary should look like this:
# 
# ```python
# {'João': {'total_sales': 1000, 'number_of_sales': 1}}
# ```
# 
# If, later, the user enters "João" and "2000" for sales, the dictionary should look like this:
# 
# ```python
# {'João': {'total_sales': 3000, 'number_of_sales': 2}}
# ```
# 
# Notice how the total sales for João increased by 2000, as well as the number of sales increased by one unit.
# 
# At the end, show the total sales and the average sales for each salesperson.
# 
# Example output:
# 
# ```
# Enter the name of the salesperson (or 'exit' to exit): João
# Enter the sales: 1000
# Enter the name of the salesperson (or 'exit' to exit): Maria
# Enter the sales: 2000
# Enter the name of the salesperson (or 'exit' to exit): João
# Enter the sales: 2000
# Enter the name of the salesperson (or 'exit' to exit): Maria
# Enter the sales: 3000
# Enter the name of the salesperson (or 'exit' to exit): exit
# João: Total sales = $3000.00, Average sales = $1500.00
# Maria: Total sales = $5000.00, Average sales = $2500.00
# ```

# In[ ]:


# solution



# ### Third Version of the Sales Report

# Maintain the functionality of the program, but now use functions to organize the code. Create functions for each of the operations: `request_salesperson_name`, `request_sales`, `update_data`, and `print_data`. The program should continue to function the same way, but now the code should be organized into functions.

# In[ ]:


# solution



# ## Customer Segmentation

# ### First Version of Customer Segmentation

# Write a program that segments customers based on their total purchases.
# The user should enter the customer's name and their total purchases, and the program
# should assign each customer to a segment: 'Bronze' for purchases up to $1000,
# 'Silver' for purchases up to $5000, and 'Gold' for purchases over $5000.
# 
# Structure your program as follows:
# 
# 1. Create an empty dictionary to store customers and their segments.
# 2. Create an infinite loop that prompts the user for the customer's name and their total purchases.
# 3. Within the loop, use an if statement to assign the appropriate segment to the customer.
# 4. If the user enters 'exit' for the customer's name, end the loop using break.
# 5. Outside the loop, use a for loop to print the name and segment of each customer.
# 
# Example output:
#     
# ```
# Enter the name of the customer (or 'exit' to exit): João
# Enter the total purchases: 100
# Enter the name of the customer (or 'exit' to exit): Maria
# Enter the total purchases: 2000
# Enter the name of the customer (or 'exit' to exit): José
# Enter the total purchases: 6000
# Enter the name of the customer (or 'exit' to exit): exit
# João: Customer Segment = Bronze
# Maria: Customer Segment = Silver
# José: Customer Segment = Gold
# ```

# In[ ]:


# solution



# ### Second Version of Customer Segmentation

# Maintain the same functionality of the previous program, but now validate the user input.
# If the user enters an invalid value for purchases, show the message
# "Invalid input. Please enter a number for purchases." and ask the user to enter
# the value again. Such validation must be done using try/except.
# 
# Additionally, instead of leaving the purchase limits fixed in the program, store them in a
# list of tuples. For example:
# 
# ```python
# segments = [(1000, 'Bronze'), (5000, 'Silver'), (float('inf'), 'Gold')]
# ``` 
# 
# This way, other segments can be easily added. The first element of the tuple is the
# purchase limit and the second is the segment name. The last element of the list is a tuple
# with the limit `float('inf')`, representing the Gold segment. This means that if the purchase
# value is greater than all limits, the segment will be Gold.
# 
# Then, go through this list and, for each tuple, check if the purchase value is less than or equal
# to the limit. If it is, store the segment in a dictionary. For example, if the user enters
# "João" and "500" for purchases, the dictionary should look like this:
# `{'João': 'Bronze'}`

# In[ ]:


# solution



# ### Third Version of Customer Segmentation

# Maintain the functionality of the program, but now use functions to organize the code. Create functions for each of the operations: `request_customer_name`, `request_total_purchases`, `assign_segment`, and `print_segment_by_customer`. The program should continue to function the same way, but now the code should be organized into functions. Additionally, normalize all names to be stored in lowercase.

# In[ ]:


# solution


# ## Text Analyzer

# Create a program that analyzes a text provided by the user.
# The program should count the number of words (regardless of repetition),
# the frequency of each word, and the frequency of each letter. Ignore case when counting letters.
# Don't worry about punctuation and spaces when counting words.
# 
# The program should contain a function called `analyze_text` that takes the text
# as a parameter and returns the word count, word frequency, and letter frequency.
# 
# For the text "Hello world! This is a test. Hello again." the program should
# print:
#     
# ```
# Word count: 8
# Word frequency: {'Hello': 2, 'world!': 1, 'This': 1, 'is': 1, 'a': 1, 'test.': 1, 'again.': 1}
# Letter frequency: {'h': 4, 'e': 6, 'l': 4, 'o': 4, 'w': 1, 'r': 1, 'd': 1, '!': 1, 't': 4, 'i': 1, 's': 2, 'a': 2, '.': 2, 'g': 1, 'n': 2}
# ```
# 
# **Note**: Later in the course, we will learn how to deal with punctuation.

# In[ ]:


# solution
```
